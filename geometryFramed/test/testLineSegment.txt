


To test:

>cd geometry
>python

import doctest
doctest.testfile("test/testLineSegment.txt")

You might need to reload after a fix.



 >>> from point import Point2
 >>> from vector import Vector2
 >>> from lineSegment import LineSegment2
 >>> from scalar import Dimension



Line segment
------------


Constructors
------------

>>> pa = Point2(1, 2, 'A')
>>> pb = Point2(1.5, 2.0, 'A')
>>> va = Vector2(1.5, 2.0, 'A')
>>> vb = Vector2(1.5, 2.0, 'B')


Two points can define a line segment.

>>> aSegment = LineSegment2(pa, pb)
>>> aSegment
LineSegment2(Point2(1.00, 2.00, A), Point2(1.50, 2.00, A))


A point and a vector can define a line segment.

>>> LineSegment2(pa, va)
LineSegment2(Point2(1.00, 2.00, A), Point2(2.50, 4.00, A))


A point, a vector, and a multiplier of type Dimension (in the same frame) can define a line segment.
>>> three = Dimension(3, 'A')
>>> LineSegment2(pa, va, three)
LineSegment2(Point2(1.00, 2.00, A), Point2(2.80, 4.40, A))


Too many arguments raises TypeError

>>> LineSegment2(1, 2, 3, 4)
Traceback (most recent call last):
...
TypeError: (1, 2, 3, 4)


Args with frame mismatches raise an exception:

>>> LineSegment2(pa, vb)
Traceback (most recent call last):
...
    assert args[0].frame == args[1].frame
AssertionError


Certain errors in type of args raise TypeError:
Two vectors cannot be used to define a LineSegment.

>>> LineSegment2(va, va)
Traceback (most recent call last):
...
TypeError: (Vector2(1.50, 2.00, A), Vector2(1.50, 2.00, A)) <class 'vector.Vector2'> <class 'vector.Vector2'>



Null line segment
-----------------

The same point used twice defines a zero-length line segment.

>>> nullSegment = LineSegment2(pa, pa)
>>> nullSegment.length == Dimension(0, 'A')
True


A point and a null vector define a zero-length line segment.
>>> nullVector = Vector2(0.00, 0.00, 'A')
>>> nullSegment = LineSegment2(pa, nullVector)
>>> nullSegment.length == Dimension(0, 'A')
True


A null line segment is not of type Point2.
(But in the classical sense, it is a point.)

>>> isinstance(nullSegment, Point2)
False


A null line segment evaluates to True.
>>> if nullSegment: print True
True

>>> nullSegment is not None
True


The only test for null segment is comparing its length to 0.

There is no isNull() method.
FIXME, code isNull()

There is no asPoint() method to convert from a null segment to a point.
FIXME code asPoint() to raise ValueError if self is not a null segment.


perp of nullSegment is a zero length vector
>>> nullSegment.perp()
Vector2(-0.00, 0.00, A)




Comparison
----------

A segment is equal to itself.

>>> aSegment == aSegment
True


A segment has a direction defined by the order of points used to create it.
The reverse of a segment is not equal to the original.

>>> reverseOfASegment = LineSegment2(pb, pa)
>>> aSegment == reverseOfASegment
False


TODO swap is not exposed in the API


Points of
---------

First and second points of a line segment are properties.
(regardless how it was constructed.)

>>> aSegment.p1
Point2(1.00, 2.00, A)

>>> aSegment.p2
Point2(1.50, 2.00, A)


Line segment methods
--------------------

The repr of a vector when exec'ed reconstructs itself.
TODO

A line segment has a magnitude defined by abs().
It is a Dimension in the same frame.

>>> abs(aSegment)
Dimension(0.5, 'A')


abs() is an alias for the length property

>>> aSegment.length == abs(aSegment)
True


A line segment has a perp, which is a Vector2.
>>> aSegment.perp()
Vector2(-0.00, 0.50, A)


Line segments do NOT project onto vectors

>>> aSegment.project(va)
Traceback (most recent call last):
...
AttributeError: 'LineSegment2' object has no attribute 'project'


Translations
---------------

A line segment can be translated between frames
by the vector that defines the difference in origin of the frames.
The result is a line segment in the frame of the vector.

>>> aSegment.translate(vb)
LineSegment2(Point2(2.50, 4.00, B), Point2(3.00, 4.00, B))


A line segment can be stretched between frames by a vector.

TODO



